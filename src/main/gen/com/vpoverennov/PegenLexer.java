/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.vpoverennov;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.vpoverennov.psi.PegenTokenType;import com.vpoverennov.psi.PegenTokenTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Pegen.flex</tt>
 */
class PegenLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_TDQSTRING = 2;
  public static final int IN_TSQSTRING = 4;
  public static final int AWAITING_META_NAME = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 16928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\21\1\23\1\21\14\24\1\25\50\24\1\26\2\24\1\27\1\30\1\31\1\32"+
    "\25\24\1\33\20\21\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1"+
    "\21\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\21\1\24\1\56\1\57\5\21\2\24\1\60"+
    "\7\21\1\24\1\61\20\21\1\24\1\62\1\21\1\63\13\24\1\64\1\24\1\65\22\21\1\66"+
    "\5\21\1\67\11\21\1\70\1\71\1\72\1\73\1\21\1\74\2\21\1\75\3\21\1\76\2\21\1"+
    "\77\10\21\123\24\1\100\7\24\1\101\1\102\12\24\1\103\24\21\1\24\1\104\u0582"+
    "\21\1\105\u017f\21");

  /* The ZZ_CMAP_Y table has 4480 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\2\0\1\2\1\3\1\4\1\5\1\6\2\7\1\10\1\11\2\7\1\12\1\13\4\0\1\14\1\15"+
    "\1\14\2\7\1\16\3\7\1\16\71\7\1\17\1\7\1\20\1\0\1\21\1\22\2\0\16\23\1\24\1"+
    "\25\1\26\1\27\2\7\1\30\11\7\1\31\21\7\1\32\1\33\24\7\1\11\3\7\1\16\1\34\1"+
    "\11\4\7\1\0\1\35\4\23\1\36\1\37\1\0\3\7\2\40\3\0\1\23\1\41\5\7\1\42\2\23\1"+
    "\4\1\43\1\44\13\7\1\45\1\46\1\47\1\50\1\4\1\51\2\0\1\52\3\7\3\23\1\53\12\7"+
    "\1\54\1\23\1\55\1\0\1\4\1\56\3\7\1\42\1\57\1\14\2\7\1\54\1\60\1\61\1\62\2"+
    "\0\3\7\1\63\10\0\2\7\1\24\1\64\2\0\1\65\1\23\1\66\3\23\1\67\6\7\1\70\2\23"+
    "\1\71\1\7\1\72\1\4\1\11\1\7\1\73\1\74\1\75\2\7\1\76\1\77\1\100\1\46\1\101"+
    "\1\102\1\103\1\72\1\4\1\20\1\0\1\104\1\105\1\75\2\7\1\76\1\106\1\107\1\110"+
    "\1\111\1\112\1\113\1\114\1\4\1\115\1\0\1\104\1\31\1\30\2\7\1\76\1\116\1\100"+
    "\1\36\1\117\1\120\1\0\1\72\1\4\1\0\1\34\1\104\1\74\1\75\2\7\1\76\1\116\1\100"+
    "\1\46\1\111\1\121\1\103\1\72\1\4\1\34\1\0\1\122\1\123\1\124\1\125\1\126\1"+
    "\123\1\7\1\127\1\130\1\131\1\132\1\0\1\114\1\4\2\0\1\133\1\24\1\76\2\7\1\76"+
    "\1\7\1\134\1\135\1\131\1\136\1\40\1\72\1\4\2\0\1\73\1\24\1\76\2\7\1\76\1\137"+
    "\1\100\1\135\1\131\1\136\1\140\1\72\1\4\1\141\1\0\1\104\1\24\1\76\4\7\1\142"+
    "\1\135\1\143\1\144\1\145\1\72\1\4\1\0\1\33\1\146\1\7\1\16\1\33\2\7\1\30\1"+
    "\147\1\16\1\150\1\151\1\23\1\114\1\4\1\152\1\0\1\11\5\7\1\153\1\41\1\154\1"+
    "\155\1\4\1\156\4\0\1\157\1\160\1\161\1\11\1\162\1\163\1\153\1\164\1\165\1"+
    "\166\1\4\1\167\4\0\1\120\2\0\1\170\1\4\1\156\1\171\1\172\1\7\1\11\3\7\1\21"+
    "\1\35\1\23\1\135\1\173\1\23\1\35\3\23\1\174\1\175\7\0\5\7\1\42\1\23\1\176"+
    "\1\4\1\156\1\54\1\177\1\200\1\201\1\202\1\7\1\203\1\204\1\4\1\205\4\7\1\31"+
    "\1\206\5\7\1\207\51\7\1\124\1\16\1\124\5\7\1\124\4\7\1\124\1\16\1\124\1\7"+
    "\1\16\7\7\1\124\10\7\1\210\1\0\1\35\1\170\1\0\2\7\2\0\12\7\2\64\1\11\114\7"+
    "\1\74\2\7\1\11\2\7\1\40\11\7\1\123\1\7\1\120\1\7\1\24\1\211\1\0\2\7\1\211"+
    "\1\0\2\7\1\212\1\0\1\7\1\24\1\213\1\0\6\7\1\214\3\23\1\215\1\216\1\4\1\156"+
    "\3\0\1\217\1\4\1\156\13\7\1\0\5\7\1\220\10\7\1\64\1\0\3\7\1\16\1\23\1\221"+
    "\1\23\1\221\1\114\1\4\3\7\1\64\1\21\1\0\5\7\1\222\3\7\1\20\1\4\1\223\4\0\2"+
    "\7\1\154\1\221\6\7\1\173\1\155\3\23\1\46\1\4\1\156\1\4\1\156\1\145\1\0\1\23"+
    "\1\166\10\0\1\224\5\7\1\214\1\23\1\224\1\222\1\4\1\156\1\0\1\225\1\221\1\0"+
    "\1\226\3\7\1\71\1\201\1\4\1\56\4\7\1\54\1\23\1\221\1\0\4\7\1\214\2\23\1\0"+
    "\1\4\1\227\1\4\1\56\3\7\1\64\1\7\1\120\10\0\1\230\2\23\1\231\1\232\1\170\30"+
    "\7\6\23\1\166\1\225\42\7\2\64\4\7\2\64\1\7\1\233\3\7\1\64\6\7\1\24\1\165\1"+
    "\234\1\21\1\235\1\222\1\7\1\21\1\234\1\21\5\0\1\236\1\0\1\102\1\237\1\0\1"+
    "\240\3\0\1\34\1\145\2\0\1\7\1\21\6\0\1\23\1\174\1\241\1\23\1\237\1\0\1\242"+
    "\1\33\1\147\1\64\1\22\1\76\1\7\1\243\1\244\1\245\2\0\5\7\1\120\116\0\5\7\1"+
    "\16\5\7\1\16\20\7\1\21\1\246\1\247\1\0\4\7\1\31\1\206\7\7\1\145\1\0\1\102"+
    "\2\7\1\16\1\0\10\16\4\23\1\244\3\0\1\11\1\203\1\250\1\21\1\11\11\7\1\16\1"+
    "\251\1\11\12\7\1\207\1\244\4\7\1\64\1\11\12\7\1\16\2\0\3\7\1\40\6\0\170\7"+
    "\1\64\11\0\72\7\1\64\5\0\21\7\1\21\10\0\5\7\1\64\41\7\1\21\2\7\1\4\1\252\2"+
    "\0\5\7\1\154\1\65\1\253\3\7\1\54\12\7\1\170\3\0\1\145\1\7\1\33\14\7\1\75\3"+
    "\7\1\16\1\7\7\0\1\145\1\7\1\254\1\255\2\7\1\42\3\0\6\7\1\222\1\0\1\256\5\7"+
    "\1\214\1\23\1\166\1\0\1\4\1\156\2\23\1\256\1\257\1\4\1\56\2\7\1\54\1\166\2"+
    "\7\1\154\1\23\1\221\1\0\3\7\1\21\1\67\5\7\1\42\1\23\1\237\1\145\1\4\1\156"+
    "\1\260\1\7\1\4\1\261\5\7\1\71\1\155\1\0\1\255\1\262\1\4\1\156\2\7\1\16\1\263"+
    "\6\7\1\200\1\264\1\220\2\0\1\265\1\7\1\42\1\266\1\0\3\267\1\0\2\16\5\7\1\207"+
    "\1\64\1\0\16\7\1\42\1\270\1\4\1\156\64\7\1\222\1\0\2\7\1\16\1\271\5\7\1\222"+
    "\40\0\55\7\1\64\15\7\1\20\4\0\1\16\1\0\1\271\1\272\1\7\1\76\1\16\1\165\1\273"+
    "\15\7\1\20\3\0\1\271\20\7\1\64\1\161\32\7\1\64\2\0\10\7\1\33\6\7\5\0\1\7\1"+
    "\20\2\23\2\0\2\23\1\274\2\0\1\275\4\0\1\276\1\233\17\7\1\21\2\0\1\4\1\156"+
    "\1\11\2\7\1\277\1\11\2\7\1\40\1\300\6\7\1\54\3\7\1\16\3\33\1\301\4\0\1\7\1"+
    "\137\2\7\1\16\2\7\1\302\1\7\1\64\1\7\1\64\4\0\17\7\1\40\10\0\6\7\1\21\20\0"+
    "\1\303\20\0\3\7\1\21\6\7\1\120\1\0\1\237\3\0\4\7\2\0\3\7\1\40\4\7\1\54\1\41"+
    "\3\7\1\64\4\7\1\222\1\7\1\250\5\0\23\7\1\64\1\4\1\156\4\7\1\222\4\7\1\222"+
    "\5\7\1\0\6\7\1\222\23\0\46\7\1\16\1\0\2\7\1\64\1\0\1\7\23\0\1\64\1\76\4\7"+
    "\1\31\1\304\2\7\1\64\1\0\2\7\1\16\1\0\3\7\1\16\10\0\2\7\1\305\1\0\2\7\1\64"+
    "\1\0\3\7\1\20\10\0\7\7\1\300\10\0\1\306\1\65\1\137\1\11\2\7\1\222\1\110\4"+
    "\0\3\7\1\21\3\7\1\21\4\0\1\7\1\11\2\7\1\307\3\0\6\7\1\64\1\0\2\7\1\64\1\0"+
    "\2\7\1\40\1\0\2\7\1\20\15\0\11\7\1\120\6\0\6\7\1\40\1\0\6\7\1\40\41\0\1\226"+
    "\6\7\1\23\1\155\3\0\1\114\1\4\1\0\1\102\1\226\5\7\1\23\1\41\2\0\3\7\1\120"+
    "\1\4\1\156\1\226\3\7\1\154\1\23\1\310\1\4\2\0\4\7\1\311\1\0\1\226\5\7\1\42"+
    "\1\23\1\312\1\313\1\4\1\314\4\0\2\7\1\30\2\7\1\214\1\23\1\175\10\0\1\16\1"+
    "\315\1\7\1\31\1\7\1\120\5\7\1\154\1\23\1\41\1\4\1\156\1\133\1\74\1\75\2\7"+
    "\1\76\1\116\1\100\1\46\1\111\1\132\1\244\1\316\2\174\21\0\6\7\1\173\1\23\1"+
    "\176\1\40\1\4\1\156\4\0\6\7\2\23\1\317\1\0\1\4\1\156\24\0\5\7\1\154\1\166"+
    "\1\23\1\237\2\0\1\262\4\0\6\7\2\23\1\320\1\0\1\4\1\156\4\0\5\7\1\42\1\23\1"+
    "\0\1\4\1\156\6\0\3\7\1\321\1\23\1\221\1\4\1\156\54\0\10\7\1\4\1\156\1\0\1"+
    "\145\70\0\7\7\1\120\40\0\1\7\1\76\3\7\1\154\1\155\1\23\1\120\1\0\1\4\1\156"+
    "\2\0\1\33\3\7\1\322\2\23\1\35\1\155\51\0\63\7\1\20\14\0\15\7\1\16\2\0\30\7"+
    "\1\222\27\0\5\7\1\16\72\0\10\7\1\16\67\0\7\7\1\120\3\7\1\16\1\4\1\156\14\0"+
    "\3\7\1\64\1\174\1\0\6\7\1\155\1\0\1\222\1\0\1\4\1\156\1\271\2\7\1\244\2\7"+
    "\56\0\10\7\1\21\1\0\1\71\4\23\1\155\1\0\1\102\1\226\1\7\10\0\1\120\3\0\75"+
    "\7\1\21\2\0\36\7\1\40\41\0\1\20\77\0\15\7\1\40\1\7\1\21\1\7\1\120\1\7\1\323"+
    "\130\0\1\275\1\324\1\41\1\225\1\325\1\221\3\0\1\326\22\0\1\313\67\0\12\7\1"+
    "\24\10\7\1\24\1\327\1\330\1\7\1\331\1\137\7\7\1\31\1\332\2\24\3\7\1\333\1"+
    "\165\1\33\1\76\51\7\1\64\3\7\1\76\2\7\1\207\3\7\1\207\2\7\1\24\3\7\1\24\2"+
    "\7\1\16\3\7\1\16\3\7\1\76\3\7\1\76\2\7\1\207\1\334\6\4\6\23\1\155\1\225\5"+
    "\23\1\174\1\303\1\0\1\240\2\0\1\225\1\35\1\23\52\0\1\155\2\23\1\335\1\336"+
    "\1\41\72\0\30\7\1\21\1\0\1\155\5\0\10\7\1\214\1\41\1\4\1\156\24\0\1\137\3"+
    "\7\1\157\1\11\1\207\1\337\1\242\1\340\1\157\1\233\1\157\2\207\1\113\1\7\1"+
    "\30\1\7\1\222\1\341\1\30\1\7\1\222\50\0\32\7\1\16\5\0\106\7\1\21\1\0\33\7"+
    "\1\64\120\7\1\20\53\0\3\7\1\64\134\0\36\23\2\0");

  /* The ZZ_CMAP_A table has 1808 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\1\1\13\1\14\1\2\2\0\1\3\1\33\1\4\1\12\1\16\1\37\1\34\1\5\1\21"+
    "\1\22\1\31\1\30\1\40\1\41\1\36\1\43\12\11\1\25\1\40\1\44\1\27\1\42\1\35\1"+
    "\15\22\7\1\23\1\6\1\24\1\37\1\7\1\0\12\7\1\17\1\26\1\20\1\32\6\0\1\13\4\0"+
    "\1\7\12\0\1\7\1\0\1\10\7\7\1\0\2\7\4\0\4\7\6\0\5\7\7\0\1\7\1\0\1\7\1\0\10"+
    "\10\5\7\1\0\2\7\3\0\3\7\1\0\1\7\6\0\1\7\1\10\3\7\1\0\1\7\1\0\4\7\1\0\13\7"+
    "\1\0\3\7\1\0\5\10\2\0\6\7\1\0\1\7\7\0\15\10\1\0\1\10\1\0\2\10\1\0\2\10\1\0"+
    "\1\10\3\7\5\0\3\10\5\0\3\7\5\10\2\11\4\0\2\7\1\10\13\7\1\0\1\7\7\10\2\0\6"+
    "\10\2\7\2\10\1\0\4\10\2\7\2\11\3\7\2\0\2\7\1\10\6\7\3\10\2\0\11\7\3\10\1\7"+
    "\6\0\2\11\6\7\4\10\2\7\2\0\2\10\1\7\11\10\1\7\3\10\1\7\5\10\2\0\1\7\3\10\4"+
    "\0\6\7\6\0\6\10\1\0\11\10\6\7\3\10\1\7\2\10\1\7\7\10\2\7\2\10\2\0\2\11\1\7"+
    "\3\10\1\0\10\7\2\0\2\7\2\0\6\7\1\0\7\7\1\0\1\7\3\0\4\7\2\0\1\10\1\7\3\10\2"+
    "\0\3\10\1\7\10\0\1\10\4\0\2\7\1\0\1\7\1\0\3\10\1\0\6\7\4\0\2\7\1\0\2\7\1\0"+
    "\2\7\1\0\2\7\2\0\1\10\1\0\5\10\4\0\2\10\2\0\3\10\3\0\1\10\7\0\4\7\1\0\1\7"+
    "\7\0\2\11\2\10\3\7\1\10\2\0\1\7\1\0\2\7\1\0\3\7\2\10\1\0\3\10\2\0\1\7\15\0"+
    "\2\10\2\0\1\10\1\7\1\0\6\7\3\0\3\7\1\0\4\7\3\0\2\7\1\0\1\7\1\0\2\7\3\0\2\7"+
    "\3\0\2\7\4\0\5\10\3\0\3\10\1\0\4\10\2\0\1\7\6\0\5\10\1\0\5\7\3\0\1\7\7\10"+
    "\1\0\2\10\5\0\2\10\1\0\4\7\1\0\3\7\6\0\1\7\2\0\2\7\5\0\3\7\2\0\1\7\3\10\1"+
    "\0\4\10\1\7\5\0\3\7\1\10\7\0\1\7\2\0\2\10\1\0\7\7\1\0\1\7\4\0\1\10\4\0\6\10"+
    "\1\0\1\10\3\0\2\10\4\0\1\7\1\10\1\7\5\10\7\7\10\10\1\0\2\11\7\0\2\7\1\0\1"+
    "\7\2\0\2\7\1\0\1\7\2\0\1\7\6\0\4\7\1\0\3\7\1\0\1\7\1\0\1\7\2\0\2\7\1\0\3\7"+
    "\2\10\1\0\2\10\1\7\2\0\5\7\1\0\1\7\1\0\6\10\2\0\2\11\2\0\4\7\2\10\13\0\1\10"+
    "\1\0\1\10\1\0\1\10\4\0\2\10\5\7\10\10\11\0\1\10\1\0\7\10\1\7\2\10\4\7\3\10"+
    "\1\7\3\10\2\7\7\10\3\7\4\10\5\7\14\10\1\7\1\10\2\11\4\10\7\0\1\7\2\0\3\7\1"+
    "\0\7\7\2\0\3\10\2\7\3\10\3\0\2\7\2\10\4\0\1\7\1\0\2\10\4\0\4\7\10\10\3\0\1"+
    "\7\4\0\1\7\1\10\5\0\3\10\2\0\1\7\1\10\1\7\5\0\4\10\4\0\4\7\4\0\2\11\1\10\5"+
    "\0\5\10\3\7\3\0\10\10\5\7\2\11\3\0\3\7\3\10\1\0\5\10\4\7\1\10\4\7\3\10\2\7"+
    "\2\0\1\7\1\0\1\7\1\0\1\7\1\0\1\7\2\0\3\7\1\0\6\7\2\0\2\7\2\13\6\0\1\10\13"+
    "\0\1\10\4\0\1\10\3\0\3\10\2\0\1\7\4\0\3\7\2\0\4\7\5\0\5\7\4\0\1\7\4\0\4\7"+
    "\3\10\2\7\5\0\5\7\3\0\2\10\2\0\3\7\2\11\2\7\4\0\6\10\1\0\3\7\1\10\3\7\1\10"+
    "\4\7\1\10\4\7\2\10\6\7\3\0\1\7\1\0\1\7\2\0\5\7\1\10\2\7\2\11\5\7\1\0\4\7\2"+
    "\10\4\0\1\7\3\10\2\7\1\10\5\7\2\10\3\0\3\7\4\0\3\7\2\10\2\0\6\7\1\0\3\10\1"+
    "\0\2\10\5\0\5\7\5\0\1\7\1\10\3\7\1\0\2\7\1\0\2\7\3\0\2\10\10\0\3\10\1\0\1"+
    "\7\1\0\1\7\3\0\4\7\4\0\1\10\6\0\2\7\2\0\3\7\3\0\3\7\1\0\2\7\1\0\1\7\5\0\1"+
    "\10\2\0\1\7\3\0\1\7\2\0\4\7\1\0\2\7\2\0\1\7\3\10\1\0\2\10\1\0\5\7\2\10\1\0"+
    "\5\10\1\0\2\11\3\7\1\10\2\0\1\7\1\0\1\10\4\7\5\0\3\10\3\0\2\11\1\7\1\0\1\7"+
    "\3\0\1\7\1\0\4\7\1\0\3\7\2\10\2\0\6\10\2\7\1\0\1\7\1\10\3\0\1\7\3\0\2\7\3"+
    "\0\3\10\2\0\6\10\2\7\3\0\2\10\1\0\2\10\3\0\6\10\2\0\3\10\2\0\4\10\4\0\1\7"+
    "\2\0\2\7\2\0\4\7\1\0\4\7\1\0\1\7\1\0\6\7\2\0\5\7\1\0\4\7\1\0\4\7\2\0\2\11"+
    "\1\10\2\0\7\10\1\0\2\10\1\0\2\10\1\0\1\7\1\0\1\7\5\0\1\7\1\0\1\7\1\0\3\7\1"+
    "\0\3\7\1\0\3\7");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\2\2\1\3\2\1\1\4\1\5\1\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\6\30\2\31\1\32\1\33\1\34\3\35"+
    "\1\36\1\37\1\2\1\0\1\40\2\0\1\40\2\0"+
    "\2\41\1\0\1\31\2\0\1\40\1\42\1\40\1\43"+
    "\1\40\1\41\1\44";

  private static int [] zzUnpackAction() {
    int [] result = new int[69];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\45\0\112\0\157\0\224\0\271\0\336\0\u0103"+
    "\0\u0128\0\u014d\0\u0172\0\u0197\0\u01bc\0\u01e1\0\271\0\271"+
    "\0\271\0\271\0\271\0\271\0\271\0\271\0\u0206\0\u0206"+
    "\0\u0206\0\271\0\u022b\0\271\0\271\0\271\0\271\0\u0250"+
    "\0\u0206\0\271\0\u0275\0\u029a\0\u02bf\0\u02e4\0\u0309\0\u032e"+
    "\0\u0353\0\u0378\0\271\0\271\0\u039d\0\u03c2\0\271\0\u03e7"+
    "\0\271\0\u040c\0\u0431\0\u0456\0\u047b\0\u04a0\0\u04c5\0\u01e1"+
    "\0\u04ea\0\u050f\0\u0534\0\271\0\u0559\0\u057e\0\271\0\271"+
    "\0\u040c\0\271\0\u047b\0\271\0\271";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[69];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\6\1\14"+
    "\1\6\1\15\1\16\1\6\1\11\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\6\1\47\1\50"+
    "\1\51\1\12\1\13\1\6\1\52\1\6\1\15\1\16"+
    "\1\6\1\51\1\53\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\2\54\1\6\1\54\1\55\6\54\2\6"+
    "\32\54\1\6\2\54\1\56\5\54\2\6\30\54\1\57"+
    "\2\6\4\57\1\60\3\57\2\6\30\57\47\0\1\61"+
    "\43\0\1\61\46\0\1\11\10\0\1\11\30\0\1\62"+
    "\2\0\1\62\1\63\1\62\1\64\36\62\1\65\2\0"+
    "\2\65\1\66\1\67\36\65\7\0\3\14\44\0\1\15"+
    "\33\0\1\70\1\71\1\72\42\70\27\0\1\42\44\0"+
    "\1\42\1\0\1\41\51\0\1\73\35\0\1\42\12\0"+
    "\1\42\31\0\1\42\12\0\1\41\31\0\1\42\13\0"+
    "\1\41\30\0\1\42\14\0\1\41\2\0\1\74\43\0"+
    "\1\74\46\0\1\51\10\0\1\51\37\0\3\52\37\0"+
    "\1\75\45\0\1\76\46\0\3\60\33\0\1\62\2\0"+
    "\1\62\1\77\1\62\1\64\36\62\4\0\1\100\40\0"+
    "\1\62\2\0\1\62\1\101\1\62\1\64\36\62\1\65"+
    "\2\0\2\65\1\77\1\67\36\65\5\0\1\102\37\0"+
    "\1\65\2\0\2\65\1\103\1\67\36\65\2\0\1\104"+
    "\43\0\1\104\101\0\1\42\12\0\1\105\45\0\1\105"+
    "\37\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1443];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\10\1\10\11\3\1\1\11\1\1\4\11"+
    "\2\1\1\11\10\1\2\11\2\1\1\11\1\1\1\11"+
    "\1\0\1\1\2\0\1\1\2\0\2\1\1\0\1\11"+
    "\2\0\2\11\1\1\1\11\1\1\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[69];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    int parenlev = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  PegenLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 37: break;
          case 2: 
            { return parenlev > 0 ? PegenTokenTypes.NL : PegenTokenTypes.NEWLINE;
            } 
            // fall through
          case 38: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 39: break;
          case 4: 
            { return PegenTokenTypes.NAME;
            } 
            // fall through
          case 40: break;
          case 5: 
            { return PegenTokenTypes.NUMBER;
            } 
            // fall through
          case 41: break;
          case 6: 
            { return PegenTokenTypes.AT;
            } 
            // fall through
          case 42: break;
          case 7: 
            { return PegenTokenTypes.DOLLAR_SIGN;
            } 
            // fall through
          case 43: break;
          case 8: 
            { parenlev += 1; return PegenTokenTypes.LBRACE;
            } 
            // fall through
          case 44: break;
          case 9: 
            { parenlev -= 1; return PegenTokenTypes.RBRACE;
            } 
            // fall through
          case 45: break;
          case 10: 
            { parenlev += 1; return PegenTokenTypes.LPAREN;
            } 
            // fall through
          case 46: break;
          case 11: 
            { parenlev -= 1; return PegenTokenTypes.RPAREN;
            } 
            // fall through
          case 47: break;
          case 12: 
            { parenlev += 1; return PegenTokenTypes.LSQB;
            } 
            // fall through
          case 48: break;
          case 13: 
            { parenlev -= 1; return PegenTokenTypes.RSQB;
            } 
            // fall through
          case 49: break;
          case 14: 
            { return PegenTokenTypes.COLON;
            } 
            // fall through
          case 50: break;
          case 15: 
            { return PegenTokenTypes.VBAR;
            } 
            // fall through
          case 51: break;
          case 16: 
            { return PegenTokenTypes.EQUAL;
            } 
            // fall through
          case 52: break;
          case 17: 
            { return PegenTokenTypes.PLUS;
            } 
            // fall through
          case 53: break;
          case 18: 
            { return PegenTokenTypes.STAR;
            } 
            // fall through
          case 54: break;
          case 19: 
            { return PegenTokenTypes.CUT;
            } 
            // fall through
          case 55: break;
          case 20: 
            { return PegenTokenTypes.NOT;
            } 
            // fall through
          case 56: break;
          case 21: 
            { return PegenTokenTypes.AMPER;
            } 
            // fall through
          case 57: break;
          case 22: 
            { return PegenTokenTypes.QUESTION_MARK;
            } 
            // fall through
          case 58: break;
          case 23: 
            { return PegenTokenTypes.DOT;
            } 
            // fall through
          case 59: break;
          case 24: 
            { return PegenTokenTypes.OP;
            } 
            // fall through
          case 60: break;
          case 25: 
            { return PegenTokenTypes.NL;
            } 
            // fall through
          case 61: break;
          case 26: 
            { return TokenType.NEW_LINE_INDENT;
            } 
            // fall through
          case 62: break;
          case 27: 
            { return parenlev > 0 ? PegenTokenTypes.NAME : PegenTokenTypes.RULE_NAME;
            } 
            // fall through
          case 63: break;
          case 28: 
            { yybegin(AWAITING_META_NAME); return PegenTokenTypes.AT;
            } 
            // fall through
          case 64: break;
          case 29: 
            { 
            } 
            // fall through
          case 65: break;
          case 30: 
            { yybegin(YYINITIAL);
            } 
            // fall through
          case 66: break;
          case 31: 
            { yybegin(YYINITIAL); return PegenTokenTypes.META_NAME;
            } 
            // fall through
          case 67: break;
          case 32: 
            { return PegenTokenTypes.STRING;
            } 
            // fall through
          case 68: break;
          case 33: 
            { return PegenTokenTypes.LINE_COMMENT;
            } 
            // fall through
          case 69: break;
          case 34: 
            { yybegin(IN_TDQSTRING);
            } 
            // fall through
          case 70: break;
          case 35: 
            { yybegin(IN_TSQSTRING);
            } 
            // fall through
          case 71: break;
          case 36: 
            { yybegin(YYINITIAL); return PegenTokenTypes.STRING;
            } 
            // fall through
          case 72: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
